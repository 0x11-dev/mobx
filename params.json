{"name":"mobservable","tagline":"Write applications as if data doesn't change","body":"mobservable \r\n\r\nMOBservable is light-weight stand-alone transparent reactive programming library to create reactive primitives, functions, arrays and objects. Its goal is to make developers happy and productive. It loves React.\r\n\r\nWrite applications as if data doesn't change\r\n\r\nMobservable helps you to process and propagate changes through your program automatically.\r\nBy applying transparent functional reactive programming you get rid of possible stale values and views in your application without needing to manage data subscriptions.\r\nInstead of that, dependencies between data and functions are tracked automatically.\r\n\r\n| **Self updating functions** prevents the existence of stale values and avoids the need for subscriptions | **The Reactjs decorator** turns reactjs components in to observers that automatically sideways load data for ((bleeding edge performance)[mendix.com/tech-blog/making-react-reactive-pursuit-high-performing-easily-maintainable-react-apps/] | **Functional Reactive Programming** was never easier to learn and apply. No new concepts, just turn good old javascript structures into observable ones. |\r\n\r\n### Observable data structures\r\n\r\n```javascript\r\nimport mobservable from 'mobservable';\r\n\r\n// Create a reactive data structure\r\nexport var todos = mobservable.fromJson([]);\r\n\r\nexport function addTodo(title) {\r\n  todos.push(mobservable.fromJson({\r\n    title: title,\r\n    completed: false\r\n  }));\r\n}\r\n\r\n// The following function will automatically be executed whenever 'todos' changes\r\nmobservable.sideEffect(() => {\r\n  console.log(\"Completed %d of %d todo items\", todos.filter(todo => todo.completed).length, todos.length)\r\n});\r\n\r\naddTodo(\"Find a clean mug\");\r\n// Prints: 'Completed 0 of 1 todo items'\r\naddTodo(\"Make coffee\");\r\n// Prints: 'Completed 0 of 2 todo items'\r\ntodos[0].completed = true;\r\n// Prints: 'Completed 1 of 2 todo items'\r\n```\r\n\r\n\r\n### Observing Reactjs components\r\n\r\nThe following components re-render automatically, but *only* if some data that is *actually used* inside the component has changed\r\n\r\n```javascript\r\nimport React, { Component } from 'react';\r\nimport { todos, addTodo } from './store';\r\nimport { ObservingComponent } from 'mobservable'\r\n\r\n// React component that responds to changes in 'todos'\r\n@ObservingComponent export class TodoList extends Component {\r\n  render() {\r\n    const todos = this.props.todos;\r\n    return (<div>\r\n      <ul>\r\n        {this.props.todos.map(todo => (<TodoItem todo={todo} key={todo.title} />))}\r\n      </ul>\r\n      <hr/>\r\n      Completed {todos.filter(todo => todo.completed).length} of {todos.length} items.\r\n      <button onClick={this.onNewTodo.bind(this)}>New Todo</button>\r\n    </div>);\r\n  }\r\n\r\n  onNewTodo() {\r\n    addTodo(prompt(\"Enter a new todo:\", \"Try mobservable at home!\"))\r\n  }\r\n}\r\n\r\n// React component that responds to changes in its 'todo'\r\n@ObservingComponent class TodoItem extends Component {\r\n  render() {\r\n    const todo = this.props.todo;\r\n    return (<li>\r\n      <input type=\"checkbox\" checked={todo.completed} onChange={this.onToggleCompleted.bind(this)} />\r\n      {todo.title}\r\n    </li>);\r\n  }\r\n\r\n  onToggleCompleted() {\r\n    this.props.todo.completed = !this.props.todo.completed;\r\n  }\r\n}\r\n\r\nReact.render(<TodoList todos={todos} />, document.body);\r\n```\r\n\r\n### Installation\r\nInstall using `npm install mobservable --save` or [download](https://raw.githubusercontent.com/mweststrate/mobservable/master/dist/mobservable.js) the stand-alone library. \r\n\r\n### Philosophy \r\n\r\nObservable values and observing functions - move the responsibility of re-evaluating values from the code that causes data to change to the code that uses the changed data\r\nwrite functions as if there is no time\r\n\r\nruntime properties\r\n\r\nread more","google":"UA-65632006-1","note":"Don't delete this file! It's used internally to help with page regeneration."}